#!/usr/bin/env osascript -l JavaScript

/**
 * @description Test script for JIRA and GitHub Integration.
 * @author Thomas Vincent
 * @version 1.0
 */

// Import the required modules
const app = Application.currentApplication();
app.includeStandardAdditions = true;

// Import the main script
const mainScript = './JIRAGitHubIntegrationShortcut.js';

// Mock data for testing
const mockJiraResponse = {
    "issues": [
        {
            "key": "PROJ-1",
            "fields": {
                "summary": "My first ticket",
                "status": {
                    "name": "Open"
                }
            }
        },
        {
            "key": "PROJ-2",
            "fields": {
                "summary": "My second ticket",
                "status": {
                    "name": "In Progress"
                }
            }
        }
    ]
};

const mockGithubResponse = [
    {
        "id": 1,
        "title": "Fix bug in login page",
        "html_url": "https://github.com/myusername/myrepo/pull/1"
    },
    {
        "id": 2,
        "title": "Add new feature",
        "html_url": "https://github.com/myusername/myrepo/pull/2"
    }
];

// Mock functions to replace actual API calls
function mockGetJiraTickets() {
    return Promise.resolve(mockJiraResponse);
}

function mockGetGithubPullRequests() {
    return Promise.resolve(mockGithubResponse);
}

// Mock function to prevent opening URLs in browser during tests
function mockOpenUrlInBrowser(url) {
    console.log(`Would open URL: ${url}`);
}

// Mock function to prevent saving files during tests
function mockSaveDataToFile(data, filePath, appName) {
    console.log(`Would save data to: ${filePath} and open with ${appName}`);
}

// Mock function to prevent displaying notifications during tests
function mockDisplayNotification(title, message) {
    console.log(`Would display notification: ${title} - ${message}`);
}

// Mock function to prevent Spotlight indexing during tests
function mockIndexFileWithSpotlight(filePath) {
    console.log(`Would index file: ${filePath}`);
}

/**
 * Run tests for the JIRA and GitHub integration script.
 */
async function runTests() {
    console.log("Running tests for JIRA and GitHub integration...");
    
    try {
        // Load the main script
        const scriptContent = app.doShellScript(`cat "${mainScript}"`);
        
        // Create a modified version with mocked functions
        const modifiedScript = scriptContent
            .replace(/function getJiraTickets\(\)[\s\S]*?}\)/, "function getJiraTickets() { return mockGetJiraTickets(); }")
            .replace(/function getGithubPullRequests\([\s\S]*?}\)/, "function getGithubPullRequests() { return mockGetGithubPullRequests(); }")
            .replace(/function openUrlInBrowser[\s\S]*?}/, "function openUrlInBrowser(url) { return mockOpenUrlInBrowser(url); }")
            .replace(/function saveDataToFile[\s\S]*?}/, "function saveDataToFile(data, filePath, appName) { return mockSaveDataToFile(data, filePath, appName); }")
            .replace(/function displayNotification[\s\S]*?}/, "function displayNotification(title, message) { return mockDisplayNotification(title, message); }")
            .replace(/function indexFileWithSpotlight[\s\S]*?}/, "function indexFileWithSpotlight(filePath) { return mockIndexFileWithSpotlight(filePath); }");
        
        // Save the modified script to a temporary file
        const tempScriptPath = "/tmp/temp_jiragithub_test.js";
        app.doShellScript(`echo '${modifiedScript.replace(/'/g, "'\\''")}' > "${tempScriptPath}"`);
        
        // Execute the modified script
        const result = app.doShellScript(`osascript -l JavaScript "${tempScriptPath}"`);
        console.log("Test execution result:", result);
        
        // Clean up the temporary file
        app.doShellScript(`rm "${tempScriptPath}"`);
        
        // Verify the results
        console.log("Tests completed successfully!");
        return true;
    } catch (error) {
        console.error("Test failed:", error.message);
        return false;
    }
}

// Run the tests
runTests().then(success => {
    if (success) {
        app.displayNotification("All tests passed!", { withTitle: "Test Results" });
    } else {
        app.displayNotification("Some tests failed. Check the logs for details.", { withTitle: "Test Results" });
    }
});
