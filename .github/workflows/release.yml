name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@thomasvincent'

      - name: Set release version
        id: get_version
        run: |
          # Strip the 'v' prefix from the tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Update version in package.json
          sed -i '' "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          
          # Update version in main script
          sed -i '' "s/\* @version .*\$/\* @version $VERSION/" src/js/JIRAGitHubIntegration.js
          
          # Update version in bash script
          sed -i '' "s/# Version: .*\$/# Version: $VERSION/" jira-github-integration.sh
          
          # Update version in test script
          sed -i '' "s/\* @version .*\$/\* @version $VERSION/" tests/test-integration.js

      - name: Create ZIP distribution
        run: |
          # Ensure workflow directory exists
          mkdir -p dist/JIRAGitHubIntegration.workflow/Contents
          
          # Create minimal workflow files if they don't exist
          if [ ! -f dist/JIRAGitHubIntegration.workflow/Contents/document.wflow ]; then
            echo "Creating minimal workflow document for distribution..."
            cat > dist/JIRAGitHubIntegration.workflow/Contents/document.wflow << 'EOF'
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>AMApplicationBuild</key>
              <string>512</string>
              <key>AMApplicationVersion</key>
              <string>2.10</string>
              <key>AMDocumentVersion</key>
              <string>2</string>
              <key>actions</key>
              <array>
                <dict>
                  <key>action</key>
                  <dict>
                    <key>AMActionVersion</key>
                    <string>1.0.2</string>
                    <key>AMApplication</key>
                    <array>
                      <string>Automator</string>
                    </array>
                    <key>AMParameterProperties</key>
                    <dict>
                      <key>source</key>
                      <dict/>
                    </dict>
                    <key>ActionBundlePath</key>
                    <string>/System/Library/Automator/Run JavaScript.action</string>
                    <key>ActionName</key>
                    <string>Run JavaScript</string>
                    <key>ActionParameters</key>
                    <dict>
                      <key>source</key>
                      <string>function run(input, parameters) {
    var app = Application.currentApplication();
    app.includeStandardAdditions = true;
    
    try {
        var scriptPath = app.pathTo("home folder") + "/macos-jira-github-integration-shortcut/src/js/JIRAGitHubIntegration.js";
        var result = app.doShellScript("osascript -l JavaScript '" + scriptPath + "'");
        app.displayNotification("JIRA tickets and GitHub pull requests retrieved successfully.", {
            withTitle: "Integration Complete",
            soundName: "Glass"
        });
        return result;
    } catch (error) {
        app.displayNotification("Error: " + error.message, {
            withTitle: "Integration Failed",
            soundName: "Basso"
        });
        return error.message;
    }
}</string>
                    </dict>
                    <key>BundleIdentifier</key>
                    <string>com.apple.Automator.RunJavaScript</string>
                  </dict>
                </dict>
              </array>
            </dict>
            </plist>
            EOF
          fi
          
          if [ ! -f dist/JIRAGitHubIntegration.workflow/Contents/Info.plist ]; then
            echo "Creating minimal Info.plist for distribution..."
            cat > dist/JIRAGitHubIntegration.workflow/Contents/Info.plist << 'EOF'
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>CFBundleName</key>
              <string>JIRA GitHub Integration</string>
              <key>NSServices</key>
              <array>
                <dict>
                  <key>NSMenuItem</key>
                  <dict>
                    <key>default</key>
                    <string>JIRA GitHub Integration</string>
                  </dict>
                  <key>NSMessage</key>
                  <string>runWorkflowAsService</string>
                </dict>
              </array>
            </dict>
            </plist>
            EOF
          fi
          
          # Create distribution directory
          mkdir -p dist/macos-jira-github-integration-${{ env.VERSION }}
          mkdir -p dist/macos-jira-github-integration-${{ env.VERSION }}/dist
          
          # Copy files to distribution directory
          cp -R src dist/macos-jira-github-integration-${{ env.VERSION }}/
          cp -R tests dist/macos-jira-github-integration-${{ env.VERSION }}/
          cp -R dist/JIRAGitHubIntegration.workflow dist/macos-jira-github-integration-${{ env.VERSION }}/dist/
          cp jira-github-integration.sh dist/macos-jira-github-integration-${{ env.VERSION }}/
          cp package.json README.md LICENSE dist/macos-jira-github-integration-${{ env.VERSION }}/
          cp mock_test.js dist/macos-jira-github-integration-${{ env.VERSION }}/
          
          # Create zip file
          cd dist && zip -r macos-jira-github-integration-${{ env.VERSION }}.zip macos-jira-github-integration-${{ env.VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/macos-jira-github-integration-${{ env.VERSION }}.zip
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Release v${{ env.VERSION }}
            
            ### What's Changed
            
            Changes in this release:
            - Check the auto-generated release notes below for full commit history
            
            ### Installation
            
            ```bash
            # Clone the repository
            git clone https://github.com/thomasvincent/macos-jira-github-integration-shortcut.git
            cd macos-jira-github-integration-shortcut
            
            # Make scripts executable
            chmod +x src/js/JIRAGitHubIntegration.js
            chmod +x jira-github-integration.sh
            ```
            
            Alternatively, download and extract the ZIP file.

      - name: Publish to GitHub Packages
        run: |
          # Create a minimal distribution package
          mkdir -p npm-package
          mkdir -p npm-package/dist
          
          # Copy necessary files
          cp -R src npm-package/
          cp -R tests npm-package/
          cp jira-github-integration.sh npm-package/
          cp package.json README.md LICENSE npm-package/
          cp mock_test.js npm-package/
          
          # Ensure workflow directory exists
          mkdir -p npm-package/dist/JIRAGitHubIntegration.workflow/Contents
          
          # Copy workflow files 
          cp -R dist/JIRAGitHubIntegration.workflow/Contents npm-package/dist/JIRAGitHubIntegration.workflow/
          
          # Verify package structure
          echo "NPM package structure:"
          find npm-package -type f | sort
          
          # Publish to GitHub Packages
          cd npm-package
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          npm publish || echo "Publishing to GitHub Packages failed, but continuing with release"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}